name: 部署博客到W3存储
on:
  push:
    branches:
      - main

# 定义工作流阶段
jobs:
  build-and-deploy:
    name: 构建并部署博客
    runs-on: ubuntu-latest
    steps:
      # 检出代码 - 使用内置的检出操作，不依赖外部 actions v4:https://ghproxy.net/https://github.com/actions/checkout
      - name: 检出代码
        uses: https://gitea.com/actions/checkout@v4
        # with:
        #   fetch-depth: 0 # 获取完整历史以便 git 命令正常工作

      # 设置 Node.js 环境
      - name: 设置 Node.js 环境
        run: |
          echo "设置 Node.js 环境..."
          # 检查 Node.js 版本
          node --version
          npm --version

          # 安装 pnpm
          echo "安装 pnpm..."
          npm install -g pnpm

          # 配置npm和pnpm使用淘宝镜像
          echo "配置npm和pnpm镜像源..."
          npm config set registry https://registry.npmmirror.com
          pnpm config set registry https://registry.npmmirror.com

      # 安装依赖并构建
      - name: 安装依赖并构建
        run: |
          echo "安装项目依赖..."
          # 使用国内镜像源加速安装
          pnpm config set registry https://registry.npmmirror.com
          pnpm install

          echo "构建博客..."
          pnpm build

          # 检查构建结果
          echo "检查构建结果..."
          ls -la docs/.vitepress/dist || echo "构建目录不存在"

      - name: 部署 nginx
        run: |
          echo "部署 nginx docker..."
          # 确保先移除旧容器，无论其状态如何
          docker rm -f blog-web || true
          # 拉取最新的nginx镜像
          docker pull nginx:alpine
          # 创建新容器
          docker run -d -p 17779:80 --name blog-web nginx:alpine
          # 复制构建文件到容器
          docker cp docs/.vitepress/dist/. blog-web:/usr/share/nginx/html
          # 重新加载nginx配置
          docker exec blog-web nginx -s reload

      - name: 部署完成通知
        if: success()
        run: |
          echo "✅ 博客已成功部署到服务器！"
          echo "📊 部署时间: $(date)"
          echo "🌐 访问地址: http://192.168.2.102:17779"

          python3 -c '
          import urllib.request
          import urllib.parse
          import json
          import os
          import datetime

          deploy_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

          message = "✅ *博客部署成功*！\n\n📊 *部署时间*： " + deploy_time + "\n\n🔗 *访问链接*：\n▪️ [内网地址](http://192.168.2.102:17779)\n▪️ [外网地址](https://blog.yuanquanke.cn:8888)"

          token = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          chat_id = "5679555666"
          url = "https://proxy.yuanquanke.cn/https/api.telegram.org/bot" + token + "/sendMessage"

          data = {
              "chat_id": chat_id,
              "text": message,
              "parse_mode":"MarkdownV2"
          }
          encoded_data = urllib.parse.urlencode(data).encode("utf-8")

          try:
              req = urllib.request.Request(url, data=encoded_data, method="POST")
              req.add_header("Content-Type", "application/x-www-form-urlencoded")
              with urllib.request.urlopen(req) as response:
                  result = json.loads(response.read().decode("utf-8"))
                  print("Telegram 通知已发送")
                  if not result.get("ok"):
                      print("API返回错误:", result)
          except Exception as e:
              print(f"发送 Telegram 通知失败: {e}")
              exit(1)
          '
