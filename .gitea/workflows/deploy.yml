name: 部署博客到W3存储
on:
  push:
    branches:
      - main

# 定义工作流阶段
jobs:
  build-and-deploy:
    name: 构建并部署博客
    runs-on: ubuntu-latest
    steps:
      # 检出代码 - 使用内置的检出操作，不依赖外部 actions
      - name: 检出代码
        uses: actions/checkout@v4:https://github.com/actions/checkout
        with:
          fetch-depth: 0 # 获取完整历史以便 git 命令正常工作

      # 构建 Docker 镜像并运行
      - name: 构建并运行 Docker 镜像
        run: |
          echo "构建 Docker 镜像..."
          # 确保 Dockerfile 中已添加 git 和 openssh
          docker build -t vitepress-blog .

          # 创建目录以确保挂载点存在
          mkdir -p /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist

          # 清理可能存在的旧容器
          echo "清理可能存在的旧容器..."
          docker rm -f vitepress-builder || true

          # 运行容器并挂载卷
          echo "运行容器并构建博客..."
          docker run --name vitepress-builder \
            -v /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist:/app/docs/.vitepress/dist \
            vitepress-blog

          # 检查构建结果 1
          echo "检查构建结果..."
          ls -la /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist || echo "构建目录不存在"

      # 使用 Docker 运行 AWS CLI
      - name: 使用 Docker 运行 AWS CLI
        run: |
          echo "拉取 AWS CLI Docker 镜像..."
          # 拉取 AWS CLI 官方 Docker 镜像
          docker pull public.ecr.aws/aws-cli/aws-cli:latest || \
          docker pull amazon/aws-cli:latest || \
          echo "AWS CLI Docker 镜像拉取失败，但继续执行"

          # 创建 AWS 配置目录
          mkdir -p ~/.aws

          # 配置 AWS 凭证
          echo "配置 AWS 凭证..."
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

          # 配置 AWS 设置
          cat > ~/.aws/config << EOF
          [default]
          output = json
          s3 =
              addressing_style = path
              payload_signing_enabled = true
          EOF

          # 使用 Docker 运行 AWS CLI 上传文件
          echo "上传到 W3 存储..."
          docker run --rm \
            -v ~/.aws:/root/.aws \
            -v /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist:/aws/dist \
            public.ecr.aws/aws-cli/aws-cli:latest s3 cp /aws/dist s3://115-web/blog/ \
            --recursive \
            --cache-control "max-age=3600" \
            --endpoint-url http://home.yuanquanke.cn:35246 || \
          docker run --rm \
            -v ~/.aws:/root/.aws \
            -v /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist:/aws/dist \
            amazon/aws-cli:latest s3 cp /aws/dist s3://115-web/blog/ \
            --recursive \
            --cache-control "max-age=3600" \
            --endpoint-url http://home.yuanquanke.cn:35246

      # 清理资源
      - name: 清理资源
        if: always() # 无论前面步骤成功或失败，都执行清理
        run: |
          echo "清理资源..."
          docker rm -f vitepress-builder || true
          rm -rf /share/CACHEDEV1_DATA/Container/gitea/deploy/blog/dist

      # 部署完成通知
      - name: 部署完成通知
        if: success() # 仅在成功时显示
        run: |
          echo "✅ 博客已成功部署到 W3 存储！"
          echo "📊 部署时间: $(date)"
          echo "🌐 访问地址: http://home.yuanquanke.cn:35246/115-web/blog/index.html"
