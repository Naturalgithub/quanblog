name: 部署博客到S3
on:
  push:
    branches:
      - main

# 定义工作流阶段
jobs:
  # 安装依赖阶段
  install:
    name: 安装依赖
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: --user root
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 缓存依赖
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 安装 pnpm 并配置镜像源
        run: |
          # 在Alpine环境中安装pnpm
          apk add --no-cache curl
          npm install -g pnpm@latest --registry=https://registry.npmmirror.com
          pnpm config set registry https://registry.npmmirror.com
          pnpm --version

      - name: 安装依赖
        if: steps.cache-dependencies.outputs.cache-hit != 'true' || contains(github.event.head_commit.message, 'package.json')
        run: |
          echo "安装项目依赖..."
          pnpm install
          # 如果构建时间过长，可以手动安装 pagefind
          pnpm add pagefind --dev
        
  # 构建阶段
  build:
    name: 构建博客
    needs: install
    runs-on: ubuntu-latest
    container:
      image: node:22-alpine
      options: --user root
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
          
      - name: 恢复缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/package.json') }}
          
      - name: 安装 pnpm 并配置镜像源
        run: |
          # 在Alpine环境中安装pnpm
          apk add --no-cache curl
          npm install -g pnpm@latest --registry=https://registry.npmmirror.com
          pnpm config set registry https://registry.npmmirror.com
          
      - name: 构建博客
        run: |
          pnpm build
          echo "博客构建完成！"
          ls -la docs/.vitepress/dist
          
      - name: 缓存构建产物
        uses: actions/cache@v3
        with:
          path: docs/.vitepress/dist
          key: ${{ runner.os }}-dist-${{ github.sha }}
          
  # 部署阶段
  deploy:
    name: 部署到S3
    needs: build
    runs-on: ubuntu-latest
    # 部署阶段使用原生环境，因为需要安装 AWS CLI
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 恢复构建产物
        uses: actions/cache@v3
        with:
          path: docs/.vitepress/dist
          key: ${{ runner.os }}-dist-${{ github.sha }}
          
      - name: 安装 AWS CLI
        run: |
          echo "安装 AWS CLI..."
          apt-get update && apt-get install -y curl unzip python3 python3-pip
          pip3 install awscli
          aws --version || echo "AWS CLI未找到"

      - name: 配置 AWS
        run: |
          echo "配置 AWS 凭证..."
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set output json
          aws configure set default.s3.addressing_style path
          aws configure set default.s3.payload_signing_enabled true

      - name: 部署到 S3
        run: |
          echo "正在部署博客到 S3..."
          # 使用 --delete 参数删除目标位置上已经不存在于源位置的文件
          # 使用 --cache-control 参数设置缓存控制
          aws s3 sync docs/.vitepress/dist/ s3://115-web/blog/ \
            --delete \
            --cache-control "max-age=3600" \
            --endpoint-url http://home.yuanquanke.cn:35246

      - name: 部署完成通知
        run: |
          echo "博客已成功部署到 S3！"
          echo "访问地址: http://home.yuanquanke.cn:35246/115-web/blog/index.html"
